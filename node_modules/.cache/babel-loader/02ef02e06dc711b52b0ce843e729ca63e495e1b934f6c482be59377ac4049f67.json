{"ast":null,"code":"import { generateRandomName, generateRandomAge, generateContractEnd, generateFormFitnessMorale, calculatePlayerSalary } from './turkishNames';\n\n// Kadro oluşturma fonksiyonu\nexport const generateSquad = (teamName, leagueName, teamValue) => {\n  // Lig bazında ortalama reyting ve sapma değerleri\n  const leagueSettings = {\n    'Süper Lig': {\n      average: 65,\n      deviation: 20\n    },\n    '1. Lig': {\n      average: 45,\n      deviation: 10\n    },\n    '2. Lig Beyaz': {\n      average: 29,\n      deviation: 4\n    },\n    '2. Lig Kırmızı': {\n      average: 29,\n      deviation: 4\n    }\n  };\n  const settings = leagueSettings[leagueName] || {\n    average: 29,\n    deviation: 4\n  };\n\n  // Takım değerine göre ortalama reyting hesapla\n  const baseRating = Math.max(20, Math.min(80, teamValue * 2)); // Takım değerini reytinge çevir\n  const averageRating = Math.round((baseRating + settings.average) / 2);\n\n  // İlk takım (11 oyuncu)\n  const firstTeam = [];\n  const positions = ['K', 'D', 'D', 'D', 'D', 'O', 'O', 'O', 'O', 'F', 'F']; // 4-4-2 formasyonu\n\n  for (let i = 0; i < 11; i++) {\n    const position = positions[i];\n    const rating = generatePlayerRating(averageRating, settings.deviation, position);\n    const age = generateRandomAge();\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\n    firstTeam.push({\n      id: `ft_${i}`,\n      name: generateRandomName(),\n      position: position,\n      rating: rating,\n      form: generateFormFitnessMorale(),\n      age: age,\n      contractEnd: generateContractEnd(),\n      salary: salary,\n      isFirstTeam: true\n    });\n  }\n\n  // Yedek oyuncular (9 oyuncu)\n  const substitutes = [];\n  const subPositions = ['K', 'D', 'D', 'D', 'O', 'O', 'F', 'F', 'F']; // Yedek pozisyonlar\n\n  for (let i = 0; i < 9; i++) {\n    const position = subPositions[i];\n    const rating = generatePlayerRating(averageRating - 5, settings.deviation, position); // Yedekler biraz daha düşük\n\n    const age = generateRandomAge();\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\n    substitutes.push({\n      id: `sub_${i}`,\n      name: generateRandomName(),\n      position: position,\n      rating: rating,\n      form: generateFormFitnessMorale(),\n      age: age,\n      contractEnd: generateContractEnd(),\n      salary: salary,\n      isFirstTeam: false\n    });\n  }\n  return {\n    teamName: teamName,\n    league: leagueName,\n    firstTeam: firstTeam,\n    substitutes: substitutes,\n    totalPlayers: 20,\n    averageRating: Math.round([...firstTeam, ...substitutes].reduce((sum, player) => sum + player.rating, 0) / 20)\n  };\n};\n\n// Oyuncu reytingi oluşturma fonksiyonu\nconst generatePlayerRating = (average, deviation, position) => {\n  // Pozisyona göre reyting ayarlamaları\n  const positionModifiers = {\n    'K': {\n      min: 25,\n      max: 85\n    },\n    // Kaleci\n    'D': {\n      min: 20,\n      max: 80\n    },\n    // Defans\n    'O': {\n      min: 20,\n      max: 80\n    },\n    // Orta Saha\n    'F': {\n      min: 20,\n      max: 80\n    } // Forvet\n  };\n  const modifier = positionModifiers[position] || {\n    min: 20,\n    max: 80\n  };\n\n  // Normal dağılım benzeri reyting oluştur\n  let rating = average + (Math.random() - 0.5) * deviation * 2;\n  rating = Math.round(rating);\n\n  // Pozisyon sınırlarına uygula\n  rating = Math.max(modifier.min, Math.min(modifier.max, rating));\n  return rating;\n};\n\n// Kadro istatistikleri hesaplama\nexport const calculateSquadStats = squad => {\n  const allPlayers = [...squad.firstTeam, ...squad.substitutes];\n  const stats = {\n    totalPlayers: allPlayers.length,\n    averageRating: Math.round(allPlayers.reduce((sum, p) => sum + p.rating, 0) / allPlayers.length),\n    averageAge: Math.round(allPlayers.reduce((sum, p) => sum + p.age, 0) / allPlayers.length),\n    positionCount: {\n      K: allPlayers.filter(p => p.position === 'K').length,\n      D: allPlayers.filter(p => p.position === 'D').length,\n      O: allPlayers.filter(p => p.position === 'O').length,\n      F: allPlayers.filter(p => p.position === 'F').length\n    },\n    bestPlayer: allPlayers.reduce((best, current) => current.rating > best.rating ? current : best),\n    youngestPlayer: allPlayers.reduce((youngest, current) => current.age < youngest.age ? current : youngest),\n    oldestPlayer: allPlayers.reduce((oldest, current) => current.age > oldest.age ? current : oldest)\n  };\n  return stats;\n};\n\n// Tüm takımlar için kadro oluşturma\nexport const generateAllSquads = turkishLeagues => {\n  const allSquads = {};\n  Object.keys(turkishLeagues).forEach(leagueName => {\n    allSquads[leagueName] = {};\n    turkishLeagues[leagueName].forEach(team => {\n      allSquads[leagueName][team.name] = generateSquad(team.name, leagueName, team.value);\n    });\n  });\n  return allSquads;\n};","map":{"version":3,"names":["generateRandomName","generateRandomAge","generateContractEnd","generateFormFitnessMorale","calculatePlayerSalary","generateSquad","teamName","leagueName","teamValue","leagueSettings","average","deviation","settings","baseRating","Math","max","min","averageRating","round","firstTeam","positions","i","position","rating","generatePlayerRating","age","salary","push","id","name","form","contractEnd","isFirstTeam","substitutes","subPositions","league","totalPlayers","reduce","sum","player","positionModifiers","modifier","random","calculateSquadStats","squad","allPlayers","stats","length","p","averageAge","positionCount","K","filter","D","O","F","bestPlayer","best","current","youngestPlayer","youngest","oldestPlayer","oldest","generateAllSquads","turkishLeagues","allSquads","Object","keys","forEach","team","value"],"sources":["C:/Users/PC/fcpro/src/data/squadGenerator.js"],"sourcesContent":["import { \r\n  generateRandomName, \r\n  generateRandomAge, \r\n  generateContractEnd, \r\n  generateFormFitnessMorale,\r\n  calculatePlayerSalary\r\n} from './turkishNames';\r\n\r\n// Kadro oluşturma fonksiyonu\r\nexport const generateSquad = (teamName, leagueName, teamValue) => {\r\n  // Lig bazında ortalama reyting ve sapma değerleri\r\n  const leagueSettings = {\r\n    'Süper Lig': { average: 65, deviation: 20 },\r\n    '1. Lig': { average: 45, deviation: 10 },\r\n    '2. Lig Beyaz': { average: 29, deviation: 4 },\r\n    '2. Lig Kırmızı': { average: 29, deviation: 4 }\r\n  };\r\n\r\n  const settings = leagueSettings[leagueName] || { average: 29, deviation: 4 };\r\n  \r\n  // Takım değerine göre ortalama reyting hesapla\r\n  const baseRating = Math.max(20, Math.min(80, teamValue * 2)); // Takım değerini reytinge çevir\r\n  const averageRating = Math.round((baseRating + settings.average) / 2);\r\n  \r\n  // İlk takım (11 oyuncu)\r\n  const firstTeam = [];\r\n  const positions = ['K', 'D', 'D', 'D', 'D', 'O', 'O', 'O', 'O', 'F', 'F']; // 4-4-2 formasyonu\r\n  \r\n  for (let i = 0; i < 11; i++) {\r\n    const position = positions[i];\r\n    const rating = generatePlayerRating(averageRating, settings.deviation, position);\r\n    \r\n    const age = generateRandomAge();\r\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\r\n    \r\n    firstTeam.push({\r\n      id: `ft_${i}`,\r\n      name: generateRandomName(),\r\n      position: position,\r\n      rating: rating,\r\n      form: generateFormFitnessMorale(),\r\n      age: age,\r\n      contractEnd: generateContractEnd(),\r\n      salary: salary,\r\n      isFirstTeam: true\r\n    });\r\n  }\r\n  \r\n  // Yedek oyuncular (9 oyuncu)\r\n  const substitutes = [];\r\n  const subPositions = ['K', 'D', 'D', 'D', 'O', 'O', 'F', 'F', 'F']; // Yedek pozisyonlar\r\n  \r\n  for (let i = 0; i < 9; i++) {\r\n    const position = subPositions[i];\r\n    const rating = generatePlayerRating(averageRating - 5, settings.deviation, position); // Yedekler biraz daha düşük\r\n    \r\n    const age = generateRandomAge();\r\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\r\n    \r\n    substitutes.push({\r\n      id: `sub_${i}`,\r\n      name: generateRandomName(),\r\n      position: position,\r\n      rating: rating,\r\n      form: generateFormFitnessMorale(),\r\n      age: age,\r\n      contractEnd: generateContractEnd(),\r\n      salary: salary,\r\n      isFirstTeam: false\r\n    });\r\n  }\r\n  \r\n  return {\r\n    teamName: teamName,\r\n    league: leagueName,\r\n    firstTeam: firstTeam,\r\n    substitutes: substitutes,\r\n    totalPlayers: 20,\r\n    averageRating: Math.round(\r\n      [...firstTeam, ...substitutes].reduce((sum, player) => sum + player.rating, 0) / 20\r\n    )\r\n  };\r\n};\r\n\r\n// Oyuncu reytingi oluşturma fonksiyonu\r\nconst generatePlayerRating = (average, deviation, position) => {\r\n  // Pozisyona göre reyting ayarlamaları\r\n  const positionModifiers = {\r\n    'K': { min: 25, max: 85 }, // Kaleci\r\n    'D': { min: 20, max: 80 }, // Defans\r\n    'O': { min: 20, max: 80 }, // Orta Saha\r\n    'F': { min: 20, max: 80 }  // Forvet\r\n  };\r\n  \r\n  const modifier = positionModifiers[position] || { min: 20, max: 80 };\r\n  \r\n  // Normal dağılım benzeri reyting oluştur\r\n  let rating = average + (Math.random() - 0.5) * deviation * 2;\r\n  rating = Math.round(rating);\r\n  \r\n  // Pozisyon sınırlarına uygula\r\n  rating = Math.max(modifier.min, Math.min(modifier.max, rating));\r\n  \r\n  return rating;\r\n};\r\n\r\n// Kadro istatistikleri hesaplama\r\nexport const calculateSquadStats = (squad) => {\r\n  const allPlayers = [...squad.firstTeam, ...squad.substitutes];\r\n  \r\n  const stats = {\r\n    totalPlayers: allPlayers.length,\r\n    averageRating: Math.round(allPlayers.reduce((sum, p) => sum + p.rating, 0) / allPlayers.length),\r\n    averageAge: Math.round(allPlayers.reduce((sum, p) => sum + p.age, 0) / allPlayers.length),\r\n    positionCount: {\r\n      K: allPlayers.filter(p => p.position === 'K').length,\r\n      D: allPlayers.filter(p => p.position === 'D').length,\r\n      O: allPlayers.filter(p => p.position === 'O').length,\r\n      F: allPlayers.filter(p => p.position === 'F').length\r\n    },\r\n    bestPlayer: allPlayers.reduce((best, current) => current.rating > best.rating ? current : best),\r\n    youngestPlayer: allPlayers.reduce((youngest, current) => current.age < youngest.age ? current : youngest),\r\n    oldestPlayer: allPlayers.reduce((oldest, current) => current.age > oldest.age ? current : oldest)\r\n  };\r\n  \r\n  return stats;\r\n};\r\n\r\n// Tüm takımlar için kadro oluşturma\r\nexport const generateAllSquads = (turkishLeagues) => {\r\n  const allSquads = {};\r\n  \r\n  Object.keys(turkishLeagues).forEach(leagueName => {\r\n    allSquads[leagueName] = {};\r\n    \r\n    turkishLeagues[leagueName].forEach(team => {\r\n      allSquads[leagueName][team.name] = generateSquad(team.name, leagueName, team.value);\r\n    });\r\n  });\r\n  \r\n  return allSquads;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}