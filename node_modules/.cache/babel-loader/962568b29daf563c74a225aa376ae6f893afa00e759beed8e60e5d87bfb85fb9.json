{"ast":null,"code":"import { generateRandomName, generateRandomAge, generateContractEnd, generateFormFitnessMorale, calculatePlayerSalary } from './turkishNames';\n\n// CSV'den takım değerini al ve oyuncu yeteneklerini hesapla\nconst getTeamValueFromCSV = async teamName => {\n  try {\n    const response = await fetch('/turkish_leagues_with_values.csv');\n    const csvText = await response.text();\n    const lines = csvText.split('\\n').slice(1); // İlk satırı atla (başlık)\n\n    for (const line of lines) {\n      const [takim,, deger] = line.split(','); // 'lig' değişkenini atla\n      if (takim === teamName) {\n        return parseFloat(deger);\n      }\n    }\n    console.warn(`Takım değeri bulunamadı: ${teamName}`);\n    return 15; // Varsayılan değer\n  } catch (error) {\n    console.error('CSV okuma hatası:', error);\n    return 15; // Hata durumunda varsayılan değer\n  }\n};\n\n// CSV'den oyuncu yetenek seviyesini hesapla\nconst getPlayerSkillLevel = async teamValue => {\n  try {\n    const response = await fetch('/Kadro_Yetenek_Listesi__Vmin_2__Vmax_350__Ymin_20__Ymax_92_.csv');\n    const csvText = await response.text();\n    const lines = csvText.split('\\n').slice(1); // İlk satırı atla\n\n    const kadroData = lines.map(line => {\n      const [kadroDegeri, yetenek] = line.split(',');\n      return {\n        kadro: parseFloat(kadroDegeri),\n        yetenek: parseFloat(yetenek)\n      };\n    });\n\n    // Tam eşleşme var mı kontrol et\n    const exactMatch = kadroData.find(item => item.kadro === teamValue);\n    if (exactMatch) {\n      return exactMatch.yetenek;\n    }\n\n    // İnterpolasyon yap\n    for (let i = 0; i < kadroData.length - 1; i++) {\n      const current = kadroData[i];\n      const next = kadroData[i + 1];\n      if (teamValue >= current.kadro && teamValue <= next.kadro) {\n        const ratio = (teamValue - current.kadro) / (next.kadro - current.kadro);\n        const interpolatedYetenek = current.yetenek + ratio * (next.yetenek - current.yetenek);\n        return interpolatedYetenek;\n      }\n    }\n    return 50; // Varsayılan değer\n  } catch (error) {\n    console.error('CSV okuma hatası:', error);\n    return 50; // Hata durumunda varsayılan değer\n  }\n};\n\n// Kadro oluşturma fonksiyonu\nexport const generateSquad = async (teamName, leagueName, teamValue) => {\n  // CSV'den takım değerini al\n  const actualTeamValue = await getTeamValueFromCSV(teamName);\n\n  // CSV'den oyuncu yetenek seviyesini hesapla\n  const skillLevel = await getPlayerSkillLevel(actualTeamValue);\n\n  // Yetenek seviyesini oyuncu reytingine çevir (20-92 -> 20-80)\n  const baseRating = Math.max(20, Math.min(80, skillLevel));\n\n  // Lig bazında sapma değerleri\n  const leagueSettings = {\n    'Süper Lig': {\n      deviation: 15\n    },\n    '1. Lig': {\n      deviation: 12\n    },\n    '2. Lig Beyaz': {\n      deviation: 10\n    },\n    '2. Lig Kırmızı': {\n      deviation: 10\n    }\n  };\n  const settings = leagueSettings[leagueName] || {\n    deviation: 10\n  };\n\n  // İlk takım (11 oyuncu)\n  const firstTeam = [];\n  const positions = ['K', 'D', 'D', 'D', 'D', 'O', 'O', 'O', 'O', 'F', 'F']; // 4-4-2 formasyonu\n\n  for (let i = 0; i < 11; i++) {\n    const position = positions[i];\n    const rating = generatePlayerRating(averageRating, settings.deviation, position);\n    const age = generateRandomAge();\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\n    firstTeam.push({\n      id: `ft_${i}`,\n      name: generateRandomName(),\n      position: position,\n      rating: rating,\n      form: generateFormFitnessMorale(),\n      age: age,\n      contractEnd: generateContractEnd(),\n      salary: salary,\n      isFirstTeam: true\n    });\n  }\n\n  // Yedek oyuncular (9 oyuncu)\n  const substitutes = [];\n  const subPositions = ['K', 'D', 'D', 'D', 'O', 'O', 'F', 'F', 'F']; // Yedek pozisyonlar\n\n  for (let i = 0; i < 9; i++) {\n    const position = subPositions[i];\n    const rating = generatePlayerRating(averageRating - 5, settings.deviation, position); // Yedekler biraz daha düşük\n\n    const age = generateRandomAge();\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\n    substitutes.push({\n      id: `sub_${i}`,\n      name: generateRandomName(),\n      position: position,\n      rating: rating,\n      form: generateFormFitnessMorale(),\n      age: age,\n      contractEnd: generateContractEnd(),\n      salary: salary,\n      isFirstTeam: false\n    });\n  }\n  return {\n    teamName: teamName,\n    league: leagueName,\n    firstTeam: firstTeam,\n    substitutes: substitutes,\n    totalPlayers: 20,\n    averageRating: Math.round([...firstTeam, ...substitutes].reduce((sum, player) => sum + player.rating, 0) / 20)\n  };\n};\n\n// Oyuncu reytingi oluşturma fonksiyonu\nconst generatePlayerRating = (baseRating, deviation, position) => {\n  // Pozisyona göre reyting ayarlamaları\n  const positionModifiers = {\n    'K': {\n      min: 25,\n      max: 85\n    },\n    // Kaleci\n    'D': {\n      min: 20,\n      max: 80\n    },\n    // Defans\n    'O': {\n      min: 20,\n      max: 80\n    },\n    // Orta Saha\n    'F': {\n      min: 20,\n      max: 80\n    } // Forvet\n  };\n  const modifier = positionModifiers[position] || {\n    min: 20,\n    max: 80\n  };\n\n  // CSV'den gelen yetenek seviyesine göre reyting oluştur\n  let rating = baseRating + (Math.random() - 0.5) * deviation * 2;\n  rating = Math.round(rating);\n\n  // Pozisyon sınırlarına uygula\n  rating = Math.max(modifier.min, Math.min(modifier.max, rating));\n  return rating;\n};\n\n// Kadro istatistikleri hesaplama\nexport const calculateSquadStats = squad => {\n  const allPlayers = [...squad.firstTeam, ...squad.substitutes];\n  const stats = {\n    totalPlayers: allPlayers.length,\n    averageRating: Math.round(allPlayers.reduce((sum, p) => sum + p.rating, 0) / allPlayers.length),\n    averageAge: Math.round(allPlayers.reduce((sum, p) => sum + p.age, 0) / allPlayers.length),\n    positionCount: {\n      K: allPlayers.filter(p => p.position === 'K').length,\n      D: allPlayers.filter(p => p.position === 'D').length,\n      O: allPlayers.filter(p => p.position === 'O').length,\n      F: allPlayers.filter(p => p.position === 'F').length\n    },\n    bestPlayer: allPlayers.reduce((best, current) => current.rating > best.rating ? current : best),\n    youngestPlayer: allPlayers.reduce((youngest, current) => current.age < youngest.age ? current : youngest),\n    oldestPlayer: allPlayers.reduce((oldest, current) => current.age > oldest.age ? current : oldest)\n  };\n  return stats;\n};\n\n// Tüm takımlar için kadro oluşturma\nexport const generateAllSquads = turkishLeagues => {\n  const allSquads = {};\n  Object.keys(turkishLeagues).forEach(leagueName => {\n    allSquads[leagueName] = {};\n    turkishLeagues[leagueName].forEach(team => {\n      allSquads[leagueName][team.name] = generateSquad(team.name, leagueName, team.value || 15);\n    });\n  });\n  return allSquads;\n};","map":{"version":3,"names":["generateRandomName","generateRandomAge","generateContractEnd","generateFormFitnessMorale","calculatePlayerSalary","getTeamValueFromCSV","teamName","response","fetch","csvText","text","lines","split","slice","line","takim","deger","parseFloat","console","warn","error","getPlayerSkillLevel","teamValue","kadroData","map","kadroDegeri","yetenek","kadro","exactMatch","find","item","i","length","current","next","ratio","interpolatedYetenek","generateSquad","leagueName","actualTeamValue","skillLevel","baseRating","Math","max","min","leagueSettings","deviation","settings","firstTeam","positions","position","rating","generatePlayerRating","averageRating","age","salary","push","id","name","form","contractEnd","isFirstTeam","substitutes","subPositions","league","totalPlayers","round","reduce","sum","player","positionModifiers","modifier","random","calculateSquadStats","squad","allPlayers","stats","p","averageAge","positionCount","K","filter","D","O","F","bestPlayer","best","youngestPlayer","youngest","oldestPlayer","oldest","generateAllSquads","turkishLeagues","allSquads","Object","keys","forEach","team","value"],"sources":["C:/Users/PC/fcpro/src/data/squadGenerator.js"],"sourcesContent":["import { \r\n  generateRandomName, \r\n  generateRandomAge, \r\n  generateContractEnd, \r\n  generateFormFitnessMorale,\r\n  calculatePlayerSalary\r\n} from './turkishNames';\r\n\r\n// CSV'den takım değerini al ve oyuncu yeteneklerini hesapla\r\nconst getTeamValueFromCSV = async (teamName) => {\r\n  try {\r\n    const response = await fetch('/turkish_leagues_with_values.csv');\r\n    const csvText = await response.text();\r\n    const lines = csvText.split('\\n').slice(1); // İlk satırı atla (başlık)\r\n    \r\n    for (const line of lines) {\r\n      const [takim, , deger] = line.split(','); // 'lig' değişkenini atla\r\n      if (takim === teamName) {\r\n        return parseFloat(deger);\r\n      }\r\n    }\r\n    \r\n    console.warn(`Takım değeri bulunamadı: ${teamName}`);\r\n    return 15; // Varsayılan değer\r\n  } catch (error) {\r\n    console.error('CSV okuma hatası:', error);\r\n    return 15; // Hata durumunda varsayılan değer\r\n  }\r\n};\r\n\r\n// CSV'den oyuncu yetenek seviyesini hesapla\r\nconst getPlayerSkillLevel = async (teamValue) => {\r\n  try {\r\n    const response = await fetch('/Kadro_Yetenek_Listesi__Vmin_2__Vmax_350__Ymin_20__Ymax_92_.csv');\r\n    const csvText = await response.text();\r\n    const lines = csvText.split('\\n').slice(1); // İlk satırı atla\r\n    \r\n    const kadroData = lines.map(line => {\r\n      const [kadroDegeri, yetenek] = line.split(',');\r\n      return {\r\n        kadro: parseFloat(kadroDegeri),\r\n        yetenek: parseFloat(yetenek)\r\n      };\r\n    });\r\n    \r\n    // Tam eşleşme var mı kontrol et\r\n    const exactMatch = kadroData.find(item => item.kadro === teamValue);\r\n    if (exactMatch) {\r\n      return exactMatch.yetenek;\r\n    }\r\n    \r\n    // İnterpolasyon yap\r\n    for (let i = 0; i < kadroData.length - 1; i++) {\r\n      const current = kadroData[i];\r\n      const next = kadroData[i + 1];\r\n      \r\n      if (teamValue >= current.kadro && teamValue <= next.kadro) {\r\n        const ratio = (teamValue - current.kadro) / (next.kadro - current.kadro);\r\n        const interpolatedYetenek = current.yetenek + ratio * (next.yetenek - current.yetenek);\r\n        return interpolatedYetenek;\r\n      }\r\n    }\r\n    \r\n    return 50; // Varsayılan değer\r\n  } catch (error) {\r\n    console.error('CSV okuma hatası:', error);\r\n    return 50; // Hata durumunda varsayılan değer\r\n  }\r\n};\r\n\r\n// Kadro oluşturma fonksiyonu\r\nexport const generateSquad = async (teamName, leagueName, teamValue) => {\r\n  // CSV'den takım değerini al\r\n  const actualTeamValue = await getTeamValueFromCSV(teamName);\r\n  \r\n  // CSV'den oyuncu yetenek seviyesini hesapla\r\n  const skillLevel = await getPlayerSkillLevel(actualTeamValue);\r\n  \r\n  // Yetenek seviyesini oyuncu reytingine çevir (20-92 -> 20-80)\r\n  const baseRating = Math.max(20, Math.min(80, skillLevel));\r\n  \r\n  // Lig bazında sapma değerleri\r\n  const leagueSettings = {\r\n    'Süper Lig': { deviation: 15 },\r\n    '1. Lig': { deviation: 12 },\r\n    '2. Lig Beyaz': { deviation: 10 },\r\n    '2. Lig Kırmızı': { deviation: 10 }\r\n  };\r\n\r\n  const settings = leagueSettings[leagueName] || { deviation: 10 };\r\n  \r\n  // İlk takım (11 oyuncu)\r\n  const firstTeam = [];\r\n  const positions = ['K', 'D', 'D', 'D', 'D', 'O', 'O', 'O', 'O', 'F', 'F']; // 4-4-2 formasyonu\r\n  \r\n  for (let i = 0; i < 11; i++) {\r\n    const position = positions[i];\r\n    const rating = generatePlayerRating(averageRating, settings.deviation, position);\r\n    \r\n    const age = generateRandomAge();\r\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\r\n    \r\n    firstTeam.push({\r\n      id: `ft_${i}`,\r\n      name: generateRandomName(),\r\n      position: position,\r\n      rating: rating,\r\n      form: generateFormFitnessMorale(),\r\n      age: age,\r\n      contractEnd: generateContractEnd(),\r\n      salary: salary,\r\n      isFirstTeam: true\r\n    });\r\n  }\r\n  \r\n  // Yedek oyuncular (9 oyuncu)\r\n  const substitutes = [];\r\n  const subPositions = ['K', 'D', 'D', 'D', 'O', 'O', 'F', 'F', 'F']; // Yedek pozisyonlar\r\n  \r\n  for (let i = 0; i < 9; i++) {\r\n    const position = subPositions[i];\r\n    const rating = generatePlayerRating(averageRating - 5, settings.deviation, position); // Yedekler biraz daha düşük\r\n    \r\n    const age = generateRandomAge();\r\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\r\n    \r\n    substitutes.push({\r\n      id: `sub_${i}`,\r\n      name: generateRandomName(),\r\n      position: position,\r\n      rating: rating,\r\n      form: generateFormFitnessMorale(),\r\n      age: age,\r\n      contractEnd: generateContractEnd(),\r\n      salary: salary,\r\n      isFirstTeam: false\r\n    });\r\n  }\r\n  \r\n  return {\r\n    teamName: teamName,\r\n    league: leagueName,\r\n    firstTeam: firstTeam,\r\n    substitutes: substitutes,\r\n    totalPlayers: 20,\r\n    averageRating: Math.round(\r\n      [...firstTeam, ...substitutes].reduce((sum, player) => sum + player.rating, 0) / 20\r\n    )\r\n  };\r\n};\r\n\r\n// Oyuncu reytingi oluşturma fonksiyonu\r\nconst generatePlayerRating = (baseRating, deviation, position) => {\r\n  // Pozisyona göre reyting ayarlamaları\r\n  const positionModifiers = {\r\n    'K': { min: 25, max: 85 }, // Kaleci\r\n    'D': { min: 20, max: 80 }, // Defans\r\n    'O': { min: 20, max: 80 }, // Orta Saha\r\n    'F': { min: 20, max: 80 }  // Forvet\r\n  };\r\n  \r\n  const modifier = positionModifiers[position] || { min: 20, max: 80 };\r\n  \r\n  // CSV'den gelen yetenek seviyesine göre reyting oluştur\r\n  let rating = baseRating + (Math.random() - 0.5) * deviation * 2;\r\n  rating = Math.round(rating);\r\n  \r\n  // Pozisyon sınırlarına uygula\r\n  rating = Math.max(modifier.min, Math.min(modifier.max, rating));\r\n  \r\n  return rating;\r\n};\r\n\r\n// Kadro istatistikleri hesaplama\r\nexport const calculateSquadStats = (squad) => {\r\n  const allPlayers = [...squad.firstTeam, ...squad.substitutes];\r\n  \r\n  const stats = {\r\n    totalPlayers: allPlayers.length,\r\n    averageRating: Math.round(allPlayers.reduce((sum, p) => sum + p.rating, 0) / allPlayers.length),\r\n    averageAge: Math.round(allPlayers.reduce((sum, p) => sum + p.age, 0) / allPlayers.length),\r\n    positionCount: {\r\n      K: allPlayers.filter(p => p.position === 'K').length,\r\n      D: allPlayers.filter(p => p.position === 'D').length,\r\n      O: allPlayers.filter(p => p.position === 'O').length,\r\n      F: allPlayers.filter(p => p.position === 'F').length\r\n    },\r\n    bestPlayer: allPlayers.reduce((best, current) => current.rating > best.rating ? current : best),\r\n    youngestPlayer: allPlayers.reduce((youngest, current) => current.age < youngest.age ? current : youngest),\r\n    oldestPlayer: allPlayers.reduce((oldest, current) => current.age > oldest.age ? current : oldest)\r\n  };\r\n  \r\n  return stats;\r\n};\r\n\r\n// Tüm takımlar için kadro oluşturma\r\nexport const generateAllSquads = (turkishLeagues) => {\r\n  const allSquads = {};\r\n  \r\n  Object.keys(turkishLeagues).forEach(leagueName => {\r\n    allSquads[leagueName] = {};\r\n    \r\n    turkishLeagues[leagueName].forEach(team => {\r\n      allSquads[leagueName][team.name] = generateSquad(team.name, leagueName, team.value || 15);\r\n    });\r\n  });\r\n  \r\n  return allSquads;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}