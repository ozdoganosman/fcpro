{"ast":null,"code":"import{generateRandomName,generateRandomAge,generateContractEnd,generateFormFitnessMorale,calculatePlayerSalary}from'./turkishNames';// CSV'den takım değerini al ve oyuncu yeteneklerini hesapla\nconst getTeamValueFromCSV=async teamName=>{try{const response=await fetch('/turkish_leagues_with_values.csv');const csvText=await response.text();const lines=csvText.split('\\n').slice(1);// İlk satırı atla (başlık)\nfor(const line of lines){const[takim,,deger]=line.split(',');// 'lig' değişkenini atla\nif(takim===teamName){return parseFloat(deger);}}console.warn(\"Tak\\u0131m de\\u011Feri bulunamad\\u0131: \".concat(teamName));return 15;// Varsayılan değer\n}catch(error){console.error('CSV okuma hatası:',error);return 15;// Hata durumunda varsayılan değer\n}};// CSV'den oyuncu yetenek seviyesini hesapla\nconst getPlayerSkillLevel=async teamValue=>{try{const response=await fetch('/Kadro_Yetenek_Listesi__Vmin_2__Vmax_350__Ymin_20__Ymax_92_.csv');const csvText=await response.text();const lines=csvText.split('\\n').slice(1);// İlk satırı atla\nconst kadroData=lines.map(line=>{const[kadroDegeri,yetenek]=line.split(',');return{kadro:parseFloat(kadroDegeri),yetenek:parseFloat(yetenek)};});// Tam eşleşme var mı kontrol et\nconst exactMatch=kadroData.find(item=>item.kadro===teamValue);if(exactMatch){return exactMatch.yetenek;}// İnterpolasyon yap\nfor(let i=0;i<kadroData.length-1;i++){const current=kadroData[i];const next=kadroData[i+1];if(teamValue>=current.kadro&&teamValue<=next.kadro){const ratio=(teamValue-current.kadro)/(next.kadro-current.kadro);const interpolatedYetenek=current.yetenek+ratio*(next.yetenek-current.yetenek);return interpolatedYetenek;}}return 50;// Varsayılan değer\n}catch(error){console.error('CSV okuma hatası:',error);return 50;// Hata durumunda varsayılan değer\n}};// Kadro oluşturma fonksiyonu\nexport const generateSquad=async(teamName,leagueName)=>{// CSV'den takım değerini al\nconst actualTeamValue=await getTeamValueFromCSV(teamName);// CSV'den oyuncu yetenek seviyesini hesapla\nconst skillLevel=await getPlayerSkillLevel(actualTeamValue);// Yetenek seviyesini oyuncu reytingine çevir (20-92 -> 20-80)\nconst baseRating=Math.max(20,Math.min(80,skillLevel));// Lig bazında sapma değerleri\nconst leagueSettings={'Süper Lig':{deviation:15},'1. Lig':{deviation:12},'2. Lig Beyaz':{deviation:10},'2. Lig Kırmızı':{deviation:10}};const settings=leagueSettings[leagueName]||{deviation:10};// İlk takım (11 oyuncu)\nconst firstTeam=[];const positions=['K','D','D','D','D','O','O','O','O','F','F'];// 4-4-2 formasyonu\nfor(let i=0;i<11;i++){const position=positions[i];const rating=generatePlayerRating(baseRating,settings.deviation,position);const age=generateRandomAge();const salary=calculatePlayerSalary(rating,age,position,leagueName);firstTeam.push({id:\"ft_\".concat(i),name:generateRandomName(),position:position,rating:rating,form:generateFormFitnessMorale(),age:age,contractEnd:generateContractEnd(),salary:salary,isFirstTeam:true});}// Yedek oyuncular (9 oyuncu)\nconst substitutes=[];const subPositions=['K','D','D','D','O','O','F','F','F'];// Yedek pozisyonlar\nfor(let i=0;i<9;i++){const position=subPositions[i];const rating=generatePlayerRating(baseRating-5,settings.deviation,position);// Yedekler biraz daha düşük\nconst age=generateRandomAge();const salary=calculatePlayerSalary(rating,age,position,leagueName);substitutes.push({id:\"sub_\".concat(i),name:generateRandomName(),position:position,rating:rating,form:generateFormFitnessMorale(),age:age,contractEnd:generateContractEnd(),salary:salary,isFirstTeam:false});}return{teamName:teamName,league:leagueName,firstTeam:firstTeam,substitutes:substitutes,totalPlayers:20,averageRating:Math.round([...firstTeam,...substitutes].reduce((sum,player)=>sum+player.rating,0)/20)};};// Oyuncu reytingi oluşturma fonksiyonu\nconst generatePlayerRating=(baseRating,deviation,position)=>{// Pozisyona göre reyting ayarlamaları\nconst positionModifiers={'K':{min:25,max:85},// Kaleci\n'D':{min:20,max:80},// Defans\n'O':{min:20,max:80},// Orta Saha\n'F':{min:20,max:80}// Forvet\n};const modifier=positionModifiers[position]||{min:20,max:80};// CSV'den gelen yetenek seviyesine göre reyting oluştur\nlet rating=baseRating+(Math.random()-0.5)*deviation*2;rating=Math.round(rating);// Pozisyon sınırlarına uygula\nrating=Math.max(modifier.min,Math.min(modifier.max,rating));return rating;};// Kadro istatistikleri hesaplama\nexport const calculateSquadStats=squad=>{const allPlayers=[...squad.firstTeam,...squad.substitutes];const stats={totalPlayers:allPlayers.length,averageRating:Math.round(allPlayers.reduce((sum,p)=>sum+p.rating,0)/allPlayers.length),averageAge:Math.round(allPlayers.reduce((sum,p)=>sum+p.age,0)/allPlayers.length),positionCount:{K:allPlayers.filter(p=>p.position==='K').length,D:allPlayers.filter(p=>p.position==='D').length,O:allPlayers.filter(p=>p.position==='O').length,F:allPlayers.filter(p=>p.position==='F').length},bestPlayer:allPlayers.reduce((best,current)=>current.rating>best.rating?current:best),youngestPlayer:allPlayers.reduce((youngest,current)=>current.age<youngest.age?current:youngest),oldestPlayer:allPlayers.reduce((oldest,current)=>current.age>oldest.age?current:oldest)};return stats;};// Tüm takımlar için kadro oluşturma\nexport const generateAllSquads=async turkishLeagues=>{const allSquads={};for(const leagueName of Object.keys(turkishLeagues)){allSquads[leagueName]={};for(const team of turkishLeagues[leagueName]){allSquads[leagueName][team.name]=await generateSquad(team.name,leagueName);}}return allSquads;};","map":{"version":3,"names":["generateRandomName","generateRandomAge","generateContractEnd","generateFormFitnessMorale","calculatePlayerSalary","getTeamValueFromCSV","teamName","response","fetch","csvText","text","lines","split","slice","line","takim","deger","parseFloat","console","warn","concat","error","getPlayerSkillLevel","teamValue","kadroData","map","kadroDegeri","yetenek","kadro","exactMatch","find","item","i","length","current","next","ratio","interpolatedYetenek","generateSquad","leagueName","actualTeamValue","skillLevel","baseRating","Math","max","min","leagueSettings","deviation","settings","firstTeam","positions","position","rating","generatePlayerRating","age","salary","push","id","name","form","contractEnd","isFirstTeam","substitutes","subPositions","league","totalPlayers","averageRating","round","reduce","sum","player","positionModifiers","modifier","random","calculateSquadStats","squad","allPlayers","stats","p","averageAge","positionCount","K","filter","D","O","F","bestPlayer","best","youngestPlayer","youngest","oldestPlayer","oldest","generateAllSquads","turkishLeagues","allSquads","Object","keys","team"],"sources":["C:/Users/PC/fcpro/src/data/squadGenerator.js"],"sourcesContent":["import { \r\n  generateRandomName, \r\n  generateRandomAge, \r\n  generateContractEnd, \r\n  generateFormFitnessMorale,\r\n  calculatePlayerSalary\r\n} from './turkishNames';\r\n\r\n// CSV'den takım değerini al ve oyuncu yeteneklerini hesapla\r\nconst getTeamValueFromCSV = async (teamName) => {\r\n  try {\r\n    const response = await fetch('/turkish_leagues_with_values.csv');\r\n    const csvText = await response.text();\r\n    const lines = csvText.split('\\n').slice(1); // İlk satırı atla (başlık)\r\n    \r\n    for (const line of lines) {\r\n      const [takim, , deger] = line.split(','); // 'lig' değişkenini atla\r\n      if (takim === teamName) {\r\n        return parseFloat(deger);\r\n      }\r\n    }\r\n    \r\n    console.warn(`Takım değeri bulunamadı: ${teamName}`);\r\n    return 15; // Varsayılan değer\r\n  } catch (error) {\r\n    console.error('CSV okuma hatası:', error);\r\n    return 15; // Hata durumunda varsayılan değer\r\n  }\r\n};\r\n\r\n// CSV'den oyuncu yetenek seviyesini hesapla\r\nconst getPlayerSkillLevel = async (teamValue) => {\r\n  try {\r\n    const response = await fetch('/Kadro_Yetenek_Listesi__Vmin_2__Vmax_350__Ymin_20__Ymax_92_.csv');\r\n    const csvText = await response.text();\r\n    const lines = csvText.split('\\n').slice(1); // İlk satırı atla\r\n    \r\n    const kadroData = lines.map(line => {\r\n      const [kadroDegeri, yetenek] = line.split(',');\r\n      return {\r\n        kadro: parseFloat(kadroDegeri),\r\n        yetenek: parseFloat(yetenek)\r\n      };\r\n    });\r\n    \r\n    // Tam eşleşme var mı kontrol et\r\n    const exactMatch = kadroData.find(item => item.kadro === teamValue);\r\n    if (exactMatch) {\r\n      return exactMatch.yetenek;\r\n    }\r\n    \r\n    // İnterpolasyon yap\r\n    for (let i = 0; i < kadroData.length - 1; i++) {\r\n      const current = kadroData[i];\r\n      const next = kadroData[i + 1];\r\n      \r\n      if (teamValue >= current.kadro && teamValue <= next.kadro) {\r\n        const ratio = (teamValue - current.kadro) / (next.kadro - current.kadro);\r\n        const interpolatedYetenek = current.yetenek + ratio * (next.yetenek - current.yetenek);\r\n        return interpolatedYetenek;\r\n      }\r\n    }\r\n    \r\n    return 50; // Varsayılan değer\r\n  } catch (error) {\r\n    console.error('CSV okuma hatası:', error);\r\n    return 50; // Hata durumunda varsayılan değer\r\n  }\r\n};\r\n\r\n// Kadro oluşturma fonksiyonu\r\nexport const generateSquad = async (teamName, leagueName) => {\r\n  // CSV'den takım değerini al\r\n  const actualTeamValue = await getTeamValueFromCSV(teamName);\r\n  \r\n  // CSV'den oyuncu yetenek seviyesini hesapla\r\n  const skillLevel = await getPlayerSkillLevel(actualTeamValue);\r\n  \r\n  // Yetenek seviyesini oyuncu reytingine çevir (20-92 -> 20-80)\r\n  const baseRating = Math.max(20, Math.min(80, skillLevel));\r\n  \r\n  // Lig bazında sapma değerleri\r\n  const leagueSettings = {\r\n    'Süper Lig': { deviation: 15 },\r\n    '1. Lig': { deviation: 12 },\r\n    '2. Lig Beyaz': { deviation: 10 },\r\n    '2. Lig Kırmızı': { deviation: 10 }\r\n  };\r\n\r\n  const settings = leagueSettings[leagueName] || { deviation: 10 };\r\n  \r\n  // İlk takım (11 oyuncu)\r\n  const firstTeam = [];\r\n  const positions = ['K', 'D', 'D', 'D', 'D', 'O', 'O', 'O', 'O', 'F', 'F']; // 4-4-2 formasyonu\r\n  \r\n  for (let i = 0; i < 11; i++) {\r\n    const position = positions[i];\r\n    const rating = generatePlayerRating(baseRating, settings.deviation, position);\r\n    \r\n    const age = generateRandomAge();\r\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\r\n    \r\n    firstTeam.push({\r\n      id: `ft_${i}`,\r\n      name: generateRandomName(),\r\n      position: position,\r\n      rating: rating,\r\n      form: generateFormFitnessMorale(),\r\n      age: age,\r\n      contractEnd: generateContractEnd(),\r\n      salary: salary,\r\n      isFirstTeam: true\r\n    });\r\n  }\r\n  \r\n  // Yedek oyuncular (9 oyuncu)\r\n  const substitutes = [];\r\n  const subPositions = ['K', 'D', 'D', 'D', 'O', 'O', 'F', 'F', 'F']; // Yedek pozisyonlar\r\n  \r\n  for (let i = 0; i < 9; i++) {\r\n    const position = subPositions[i];\r\n    const rating = generatePlayerRating(baseRating - 5, settings.deviation, position); // Yedekler biraz daha düşük\r\n    \r\n    const age = generateRandomAge();\r\n    const salary = calculatePlayerSalary(rating, age, position, leagueName);\r\n    \r\n    substitutes.push({\r\n      id: `sub_${i}`,\r\n      name: generateRandomName(),\r\n      position: position,\r\n      rating: rating,\r\n      form: generateFormFitnessMorale(),\r\n      age: age,\r\n      contractEnd: generateContractEnd(),\r\n      salary: salary,\r\n      isFirstTeam: false\r\n    });\r\n  }\r\n  \r\n  return {\r\n    teamName: teamName,\r\n    league: leagueName,\r\n    firstTeam: firstTeam,\r\n    substitutes: substitutes,\r\n    totalPlayers: 20,\r\n    averageRating: Math.round(\r\n      [...firstTeam, ...substitutes].reduce((sum, player) => sum + player.rating, 0) / 20\r\n    )\r\n  };\r\n};\r\n\r\n// Oyuncu reytingi oluşturma fonksiyonu\r\nconst generatePlayerRating = (baseRating, deviation, position) => {\r\n  // Pozisyona göre reyting ayarlamaları\r\n  const positionModifiers = {\r\n    'K': { min: 25, max: 85 }, // Kaleci\r\n    'D': { min: 20, max: 80 }, // Defans\r\n    'O': { min: 20, max: 80 }, // Orta Saha\r\n    'F': { min: 20, max: 80 }  // Forvet\r\n  };\r\n  \r\n  const modifier = positionModifiers[position] || { min: 20, max: 80 };\r\n  \r\n  // CSV'den gelen yetenek seviyesine göre reyting oluştur\r\n  let rating = baseRating + (Math.random() - 0.5) * deviation * 2;\r\n  rating = Math.round(rating);\r\n  \r\n  // Pozisyon sınırlarına uygula\r\n  rating = Math.max(modifier.min, Math.min(modifier.max, rating));\r\n  \r\n  return rating;\r\n};\r\n\r\n// Kadro istatistikleri hesaplama\r\nexport const calculateSquadStats = (squad) => {\r\n  const allPlayers = [...squad.firstTeam, ...squad.substitutes];\r\n  \r\n  const stats = {\r\n    totalPlayers: allPlayers.length,\r\n    averageRating: Math.round(allPlayers.reduce((sum, p) => sum + p.rating, 0) / allPlayers.length),\r\n    averageAge: Math.round(allPlayers.reduce((sum, p) => sum + p.age, 0) / allPlayers.length),\r\n    positionCount: {\r\n      K: allPlayers.filter(p => p.position === 'K').length,\r\n      D: allPlayers.filter(p => p.position === 'D').length,\r\n      O: allPlayers.filter(p => p.position === 'O').length,\r\n      F: allPlayers.filter(p => p.position === 'F').length\r\n    },\r\n    bestPlayer: allPlayers.reduce((best, current) => current.rating > best.rating ? current : best),\r\n    youngestPlayer: allPlayers.reduce((youngest, current) => current.age < youngest.age ? current : youngest),\r\n    oldestPlayer: allPlayers.reduce((oldest, current) => current.age > oldest.age ? current : oldest)\r\n  };\r\n  \r\n  return stats;\r\n};\r\n\r\n// Tüm takımlar için kadro oluşturma\r\nexport const generateAllSquads = async (turkishLeagues) => {\r\n  const allSquads = {};\r\n  \r\n  for (const leagueName of Object.keys(turkishLeagues)) {\r\n    allSquads[leagueName] = {};\r\n    \r\n    for (const team of turkishLeagues[leagueName]) {\r\n      allSquads[leagueName][team.name] = await generateSquad(team.name, leagueName);\r\n    }\r\n  }\r\n  \r\n  return allSquads;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}